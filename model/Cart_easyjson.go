// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7b63433aDecodeMygoModel(in *jlexer.Lexer, out *CartGoods) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "goods_id":
			out.GoodsId = int64(in.Int64())
		case "goods_name":
			out.GoodsName = string(in.String())
		case "goods_price":
			out.GoodsPrice = float64(in.Float64())
		case "goods_weight":
			out.GoodsWeight = float64(in.Float64())
		case "image":
			if in.IsNull() {
				in.Skip()
				out.GoodsImage = nil
			} else {
				in.Delim('[')
				if out.GoodsImage == nil {
					if !in.IsDelim(']') {
						out.GoodsImage = make([]GoodsImage, 0, 1)
					} else {
						out.GoodsImage = []GoodsImage{}
					}
				} else {
					out.GoodsImage = (out.GoodsImage)[:0]
				}
				for !in.IsDelim(']') {
					var v1 GoodsImage
					easyjson7b63433aDecodeMygoModel1(in, &v1)
					out.GoodsImage = append(out.GoodsImage, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "total_weight":
			out.TotalWeight = float64(in.Float64())
		case "total_num":
			out.TotalNum = int(in.Int())
		case "total_price":
			out.TotalPrice = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b63433aEncodeMygoModel(out *jwriter.Writer, in CartGoods) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"goods_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.GoodsId))
	}
	{
		const prefix string = ",\"goods_name\":"
		out.RawString(prefix)
		out.String(string(in.GoodsName))
	}
	{
		const prefix string = ",\"goods_price\":"
		out.RawString(prefix)
		out.Float64(float64(in.GoodsPrice))
	}
	{
		const prefix string = ",\"goods_weight\":"
		out.RawString(prefix)
		out.Float64(float64(in.GoodsWeight))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		if in.GoodsImage == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.GoodsImage {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson7b63433aEncodeMygoModel1(out, v3)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"total_weight\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalWeight))
	}
	{
		const prefix string = ",\"total_num\":"
		out.RawString(prefix)
		out.Int(int(in.TotalNum))
	}
	{
		const prefix string = ",\"total_price\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalPrice))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CartGoods) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b63433aEncodeMygoModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CartGoods) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b63433aEncodeMygoModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CartGoods) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b63433aDecodeMygoModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CartGoods) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b63433aDecodeMygoModel(l, v)
}
func easyjson7b63433aDecodeMygoModel1(in *jlexer.Lexer, out *GoodsImage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "image_id":
			out.ImageId = int64(in.Int64())
		case "url":
			out.Url = string(in.String())
		case "goods_id":
			out.GoodsId = int64(in.Int64())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b63433aEncodeMygoModel1(out *jwriter.Writer, in GoodsImage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"image_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ImageId))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"goods_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.GoodsId))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}
func easyjson7b63433aDecodeMygoModel2(in *jlexer.Lexer, out *Cart) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cart_id":
			out.CartId = int64(in.Int64())
		case "user_id":
			out.UserId = int64(in.Int64())
		case "goods":
			if in.IsNull() {
				in.Skip()
				out.Goods = nil
			} else {
				in.Delim('[')
				if out.Goods == nil {
					if !in.IsDelim(']') {
						out.Goods = make([]CartGoods, 0, 1)
					} else {
						out.Goods = []CartGoods{}
					}
				} else {
					out.Goods = (out.Goods)[:0]
				}
				for !in.IsDelim(']') {
					var v4 CartGoods
					(v4).UnmarshalEasyJSON(in)
					out.Goods = append(out.Goods, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "total_price":
			out.TotalPrice = float64(in.Float64())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "total_num":
			out.TotalNum = int(in.Int())
		case "total_weight":
			out.TotalWeight = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b63433aEncodeMygoModel2(out *jwriter.Writer, in Cart) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cart_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.CartId))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserId))
	}
	{
		const prefix string = ",\"goods\":"
		out.RawString(prefix)
		if in.Goods == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Goods {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"total_price\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalPrice))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"total_num\":"
		out.RawString(prefix)
		out.Int(int(in.TotalNum))
	}
	{
		const prefix string = ",\"total_weight\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalWeight))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Cart) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b63433aEncodeMygoModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Cart) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b63433aEncodeMygoModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Cart) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b63433aDecodeMygoModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Cart) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b63433aDecodeMygoModel2(l, v)
}
