// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson750e3c9dDecodeMygoModel(in *jlexer.Lexer, out *WechatResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "user_info":
			(out.UserInfo).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson750e3c9dEncodeMygoModel(out *jwriter.Writer, in WechatResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"user_info\":"
		out.RawString(prefix)
		(in.UserInfo).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WechatResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson750e3c9dEncodeMygoModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WechatResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson750e3c9dEncodeMygoModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WechatResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson750e3c9dDecodeMygoModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WechatResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson750e3c9dDecodeMygoModel(l, v)
}
func easyjson750e3c9dDecodeMygoModel1(in *jlexer.Lexer, out *UserInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = int64(in.Int64Str())
		case "open_id":
			out.OpenId = string(in.String())
		case "nickName":
			out.Nickname = string(in.String())
		case "gender":
			out.Gender = int(in.Int())
		case "language":
			out.Language = string(in.String())
		case "city":
			out.City = string(in.String())
		case "province":
			out.Province = string(in.String())
		case "country":
			out.Country = string(in.String())
		case "avatarUrl":
			out.AvatarUrl = string(in.String())
		case "address":
			if in.IsNull() {
				in.Skip()
				out.Address = nil
			} else {
				in.Delim('[')
				if out.Address == nil {
					if !in.IsDelim(']') {
						out.Address = make([]Address, 0, 1)
					} else {
						out.Address = []Address{}
					}
				} else {
					out.Address = (out.Address)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Address
					(v1).UnmarshalEasyJSON(in)
					out.Address = append(out.Address, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "latest_login_time":
			out.LatestLoginTime = string(in.String())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson750e3c9dEncodeMygoModel1(out *jwriter.Writer, in UserInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.UserId))
	}
	{
		const prefix string = ",\"open_id\":"
		out.RawString(prefix)
		out.String(string(in.OpenId))
	}
	{
		const prefix string = ",\"nickName\":"
		out.RawString(prefix)
		out.String(string(in.Nickname))
	}
	{
		const prefix string = ",\"gender\":"
		out.RawString(prefix)
		out.Int(int(in.Gender))
	}
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"province\":"
		out.RawString(prefix)
		out.String(string(in.Province))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"avatarUrl\":"
		out.RawString(prefix)
		out.String(string(in.AvatarUrl))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		if in.Address == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Address {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"latest_login_time\":"
		out.RawString(prefix)
		out.String(string(in.LatestLoginTime))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson750e3c9dEncodeMygoModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson750e3c9dEncodeMygoModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson750e3c9dDecodeMygoModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson750e3c9dDecodeMygoModel1(l, v)
}
func easyjson750e3c9dDecodeMygoModel2(in *jlexer.Lexer, out *Tm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "created_at":
			out.CreatedAt = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson750e3c9dEncodeMygoModel2(out *jwriter.Writer, in Tm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix[1:])
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson750e3c9dEncodeMygoModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson750e3c9dEncodeMygoModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson750e3c9dDecodeMygoModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson750e3c9dDecodeMygoModel2(l, v)
}
func easyjson750e3c9dDecodeMygoModel3(in *jlexer.Lexer, out *Address) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address_id":
			out.AddressId = int64(in.Int64Str())
		case "name":
			out.Name = string(in.String())
		case "user_id":
			out.UserId = int64(in.Int64Str())
		case "province":
			out.Province = string(in.String())
		case "city":
			out.City = string(in.String())
		case "district":
			out.District = string(in.String())
		case "detail":
			out.Detail = string(in.String())
		case "mobile":
			out.Mobile = int64(in.Int64())
		case "status":
			out.Status = int(in.Int())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson750e3c9dEncodeMygoModel3(out *jwriter.Writer, in Address) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address_id\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.AddressId))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.UserId))
	}
	{
		const prefix string = ",\"province\":"
		out.RawString(prefix)
		out.String(string(in.Province))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"district\":"
		out.RawString(prefix)
		out.String(string(in.District))
	}
	{
		const prefix string = ",\"detail\":"
		out.RawString(prefix)
		out.String(string(in.Detail))
	}
	{
		const prefix string = ",\"mobile\":"
		out.RawString(prefix)
		out.Int64(int64(in.Mobile))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Address) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson750e3c9dEncodeMygoModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Address) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson750e3c9dEncodeMygoModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Address) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson750e3c9dDecodeMygoModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Address) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson750e3c9dDecodeMygoModel3(l, v)
}
